{"version":3,"sources":["../../src/services/payment-gateway.js"],"names":["dotenv","config","FLUTTERWAVE_KEY","PUBLIC","process","env","FLUTTERWAVE_PUBLIC_KEY","SECRET","FLUTTERWAVE_SECRET_KEY","ENCRYPT","FLUTTERWAVE_ENCRYPTION","HASH","FLUTTERWAVE_HASH","PAYSTACK_KEY","LIVE_PUBLIC","PAYSTACK_LIVE_PUBLIC_KEY","LIVE_SECRET","PAYSTACK_LIVE_SECRET_KEY","TEST_PUBLIC","PAYSTACK_TEST_PUBLIC_KEY","TEST_SECRET","PAYSTACK_TEST_SECRET_KEY","gatewayRequest","httpMethod","httpUrl","payload","jwtToken","headersObj","Accept","json","options","method","uri","body","headers","auth","bearer","then","response","err","verifyOnlineTnx","paymentGateway","trxref","result","FLUTTERWAVE","LIVE_URL","VERIFY","data","SECKEY","txref","PAYSTACK","Error","message"],"mappings":";;;;;;;;AACA;;AACA;;AAEA;;;;;;;;AAEAA,mBAAOC,MAAP;;AAEA,IAAMC,eAAe,GAAG;AACtBC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,sBADE;AAEtBC,EAAAA,MAAM,EAAEH,OAAO,CAACC,GAAR,CAAYG,sBAFE;AAGtBC,EAAAA,OAAO,EAAEL,OAAO,CAACC,GAAR,CAAYK,sBAHC;AAItBC,EAAAA,IAAI,EAAEP,OAAO,CAACC,GAAR,CAAYO;AAJI,CAAxB;AAOA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAEV,OAAO,CAACC,GAAR,CAAYU,wBADN;AAEnBC,EAAAA,WAAW,EAAEZ,OAAO,CAACC,GAAR,CAAYY,wBAFN;AAGnBC,EAAAA,WAAW,EAAEd,OAAO,CAACC,GAAR,CAAYc,wBAHN;AAInBC,EAAAA,WAAW,EAAEhB,OAAO,CAACC,GAAR,CAAYgB;AAJN,CAArB;AAOA;;;;;;;;AAOO,SAASC,cAAT,CAAwBC,UAAxB,EAA0E;AAAA,MAAtCC,OAAsC,uEAA5B,EAA4B;AAAA,MAAxBC,OAAwB,uEAAd,EAAc;AAAA,MAAVC,QAAU;AAC/E,MAAMC,UAAU,GAAG;AACjBC,IAAAA,MAAM,EAAE,kBADS;AAEjB,oBAAgB,kBAFC;AAGjBC,IAAAA,IAAI,EAAE;AAHW,GAAnB;AAKA,MAAMC,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAER,UADM;AAEdS,IAAAA,GAAG,EAAER,OAFS;AAGdS,IAAAA,IAAI,EAAER,OAHQ;AAIdS,IAAAA,OAAO,EAAEP,UAJK;AAKdQ,IAAAA,IAAI,EAAE;AAAEC,MAAAA,MAAM,EAAEV;AAAV,KALQ;AAKc;AAC5BG,IAAAA,IAAI,EAAE,IANQ,CAMF;;AANE,GAAhB;AAQA,SAAO,gCAAGC,OAAH,EAAYO,IAAZ,CAAiB,UAACC,QAAD;AAAA,WAAcA,QAAd;AAAA,GAAjB,WAA+C,UAACC,GAAD;AAAA,WAASA,GAAT;AAAA,GAA/C,CAAP;AACD;;SAEqBC,e;;;;;6EAAf,iBAA+BC,cAA/B,EAA+CC,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,YAAAA,MADC,GACQ,EADR;AAEDnB,YAAAA,OAFC,GAES,EAFT;AAAA;AAAA,0BAIKiB,cAJL;AAAA,4CAKI,aALJ,uBAaI,UAbJ;AAAA;;AAAA;AAMCjB,YAAAA,OAAO,aAAMoB,uBAAYC,QAAlB,SAA6BD,uBAAYE,MAAzC,CAAP;AACMC,YAAAA,IAPP,GAOc;AACXC,cAAAA,MAAM,EAAE9C,eAAe,CAACK,MADb;AAEX0C,cAAAA,KAAK,EAAEP;AAFI,aAPd;AAAA;AAAA,mBAWgBpB,cAAc,CAAC,MAAD,EAASE,OAAT,EAAkBuB,IAAlB,EAAwB7C,eAAe,CAACK,MAAxC,CAX9B;;AAAA;AAWCoC,YAAAA,MAXD;AAAA;;AAAA;AAcCnB,YAAAA,OAAO,aAAM0B,oBAASL,QAAf,SAA0BK,oBAASJ,MAAnC,cAA6CJ,MAA7C,CAAP;AAdD;AAAA,mBAegBpB,cAAc,CAAC,KAAD,EAAQE,OAAR,EAAiB,EAAjB,EAAqBX,YAAY,CAACG,WAAlC,CAf9B;;AAAA;AAeC2B,YAAAA,MAfD;AAAA;;AAAA;AAAA,kBAkBc,IAAIQ,KAAJ,2BAA6BV,cAA7B,mBAlBd;;AAAA;AAAA,6CAoBIE,MApBJ;;AAAA;AAAA;AAAA;AAAA,kBAsBG,IAAIQ,KAAJ,CAAU,YAAIC,OAAd,CAtBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* eslint-disable no-case-declarations */\nimport rp from 'request-promise';\nimport dotenv from 'dotenv';\n\nimport { FLUTTERWAVE, PAYSTACK } from '../constants';\n\ndotenv.config();\n\nconst FLUTTERWAVE_KEY = {\n  PUBLIC: process.env.FLUTTERWAVE_PUBLIC_KEY,\n  SECRET: process.env.FLUTTERWAVE_SECRET_KEY,\n  ENCRYPT: process.env.FLUTTERWAVE_ENCRYPTION,\n  HASH: process.env.FLUTTERWAVE_HASH,\n};\n\nconst PAYSTACK_KEY = {\n  LIVE_PUBLIC: process.env.PAYSTACK_LIVE_PUBLIC_KEY,\n  LIVE_SECRET: process.env.PAYSTACK_LIVE_SECRET_KEY,\n  TEST_PUBLIC: process.env.PAYSTACK_TEST_PUBLIC_KEY,\n  TEST_SECRET: process.env.PAYSTACK_TEST_SECRET_KEY,\n};\n\n/**\n * @description gatewayRequest external request function executes foreign http request\n * @param {String} jwtToken token string\n * @param {Enum} httpMethod request method GET|POST|PUT|PATCH|DELETE\n * @param {String} httpUrl url sting\n * @param {Object} payload object\n */\nexport function gatewayRequest(httpMethod, httpUrl = '', payload = {}, jwtToken) {\n  const headersObj = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    json: true,\n  };\n  const options = {\n    method: httpMethod,\n    uri: httpUrl,\n    body: payload,\n    headers: headersObj,\n    auth: { bearer: jwtToken }, // { 'user': 'myusername', 'pass': 'mypassword' },\n    json: true, // Automatically stringifies the body to JSON\n  };\n  return rp(options).then((response) => response).catch((err) => err);\n}\n\nexport async function verifyOnlineTnx(paymentGateway, trxref) {\n  let result = {};\n  let httpUrl = '';\n  try {\n    switch (paymentGateway) {\n      case 'FLUTTERWAVE':\n        httpUrl = `${FLUTTERWAVE.LIVE_URL}${FLUTTERWAVE.VERIFY}`;\n        const data = {\n          SECKEY: FLUTTERWAVE_KEY.SECRET,\n          txref: trxref,\n        };\n        result = await gatewayRequest('POST', httpUrl, data, FLUTTERWAVE_KEY.SECRET);\n        break;\n      case 'PAYSTACK':\n        httpUrl = `${PAYSTACK.LIVE_URL}${PAYSTACK.VERIFY}/${trxref}`;\n        result = await gatewayRequest('GET', httpUrl, {}, PAYSTACK_KEY.LIVE_SECRET);\n        break;\n\n      default: throw new Error(`paymentGateway '${paymentGateway}' not allowed`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n}\n"],"file":"payment-gateway.js"}