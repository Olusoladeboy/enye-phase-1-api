{"version":3,"sources":["../../src/services/index.js"],"names":["dotenv","config","apiUrl","process","env","GATEWAY_URL","exRequest","httpMethod","httpUrl","data","jwtToken","headersObj","Accept","json","payload","options","method","uri","body","headers","auth","bearer","then","response","err","myRequest","path","getData","url","result","Error","message","postData","putData","patchData","deleteData"],"mappings":"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","sourcesContent":["import rp from 'request-promise';\nimport dotenv from 'dotenv';\nimport { cleanObject } from '../util';\n\ndotenv.config();\nconst apiUrl = process.env.GATEWAY_URL;\n\n/**\n * @description exRequest external request function executes foreign http request\n * @param {String} jwtToken token string\n * @param {Enum} httpMethod request method GET|POST|PUT|PATCH|DELETE\n * @param {String} httpUrl url sting\n * @param {Object} data payload object\n */\nexport function exRequest(httpMethod, httpUrl = '', data = {}, jwtToken) {\n  // const token = getToken(jwtToken);\n  const headersObj = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    json: true,\n  };\n  const payload = cleanObject(data);\n  const options = {\n    method: httpMethod,\n    uri: httpUrl,\n    body: payload,\n    headers: headersObj,\n    auth: { bearer: jwtToken }, // { 'user': 'myusername', 'pass': 'mypassword' },\n    json: true, // Automatically stringifies the body to JSON\n  };\n  return rp(options).then((response) => response).catch((err) => err);\n}\n\n/**\n * @description function to execute external http request\n * @param {String} jwtToken token string\n * @param {Enum} httpMethod request method GET|POST|PUT|PATCH|DELETE\n * @param {String} path url path string\n * @param {Object} data payload object\n */\nexport function myRequest(httpMethod, path = '', data = {}, jwtToken) {\n  // const token = getToken(req);\n  const headersObj = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    json: true,\n  };\n  const payload = cleanObject(data);\n  const options = {\n    method: httpMethod,\n    uri: apiUrl + path,\n    body: payload,\n    headers: headersObj,\n    auth: { bearer: jwtToken }, // { 'user': 'myusername', 'pass': 'mypassword' },\n    json: true, // Automatically stringifies the body to JSON\n  };\n  return rp(options).then((response) => response).catch((err) => err);\n}\n\nexport async function getData(url, jwtToken) {\n  try {\n    const result = await myRequest('GET', url, {}, jwtToken);\n    return result;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n}\n\nexport async function postData(url, data, jwtToken) {\n  try {\n    const result = await myRequest('POST', url, data, jwtToken);\n    return result;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n}\n\nexport async function putData(url, data, jwtToken) {\n  try {\n    const result = await myRequest('PUT', url, data, jwtToken);\n    return result;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n}\n\nexport async function patchData(url, data, jwtToken) {\n  try {\n    const result = await myRequest('PATCH', url, data, jwtToken);\n    return result;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n}\n\nexport async function deleteData(url, jwtToken) {\n  try {\n    const result = await myRequest('DELETE', url, {}, jwtToken);\n    return result;\n  } catch (err) {\n    throw new Error(err.message);\n  }\n}\n\nexport * from './payment-gateway';\n"],"file":"index.js"}