{"version":3,"sources":["../src/app.js"],"names":["dotenv","config","app","hostname","process","env","HOSTNAME","port","PORT","defaultPath","path","join","__dirname","use","req","res","next","header","bodyParser","urlencoded","extended","limit","json","express","set","database","once","console","log","on","removeAllListeners","get","success","payload","message","agent","headers","method","baseUrl","originalUrl","version","httpVersion","status","statusCode","ipaddress","origin","allData","newRecord","Access","save","then","err","setHeader","taskRoutes","userRoutes","categoryRoutes","locationRoutes","multimediaRoutes","reviewRoutes","error","server","listen","sayHello","_","setInterval","getConnections","connections","shutDown","connection","push","filter","curr","close","exit","setTimeout","forEach","end","destroy"],"mappings":"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","sourcesContent":["/* eslint-disable arrow-parens */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-use-before-define */\n/* eslint-disable object-curly-newline */\n/* eslint-disable no-console */\nimport express from 'express';\nimport 'babel-polyfill';\nimport bodyParser from 'body-parser';\nimport morgan from 'morgan';\nimport dotenv from 'dotenv';\nimport cors from 'cors';\n\nimport compression from 'compression';\nimport path from 'path';\nimport helmet from 'helmet';\n\n// import routes\nimport {\n  taskRoutes,\n  userRoutes,\n  categoryRoutes,\n  locationRoutes,\n  multimediaRoutes,\n  reviewRoutes } from './api';\nimport database from './config';\n\nimport Access from './api/access/model';\n\ndotenv.config();\nconst app = express();\n\nconst hostname = process.env.HOSTNAME || '0.0.0.0'; // \"127.0.0.1\";\nconst port = process.env.PORT;\nconst defaultPath = path.join(__dirname, '/public');\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  next();\n});\napp.use(helmet());\napp.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));\napp.use(bodyParser.json({ limit: '50mb' }));\napp.use(morgan('dev'));\napp.use(cors());\napp.use(compression());\napp.use(express.static(defaultPath));\napp.set('trust proxy', true);\n\ndatabase.once('open', () => {\n  console.log('Successfully connected to the database!');\n});\n\ndatabase.on('close', () => {\n  database.removeAllListeners();\n});\n\napp.get('/api', (req, res) => {\n  res.json({\n    success: true,\n    payload: [],\n    message: 'Hello, from GoWorkR API',\n  });\n});\n\napp.use((req, res, next) => {\n  const agent = req.headers['user-agent'];\n  const { method } = req;\n  const baseUrl = req.originalUrl;\n  const version = `HTTP/${req.httpVersion}`;\n  const status = res.statusCode;\n  // const software = req.headers[\"user-agent\"].match(/\\((.+?)\\)/)[1];\n  const ipaddress = req.headers.origin;\n  // getRequestIp(req);\n  const allData = { ipaddress, agent, method, baseUrl, version, status };\n  // console.log(allData);\n  const newRecord = new Access(allData);\n  newRecord.save().then().catch((err) => console.log(err.message));\n  next();\n});\n\napp.use((req, res, next) => {\n  res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-type');\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Credentials', 'true');\n  res.setHeader('Access-Control-Max-Age', '1800');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-type');\n  res.setHeader('Access-Control-Allow-Methods', 'PUT, POST, GET, DELETE, PATCH, OPTIONS');\n  next();\n});\n\n// Use Routes\napp.use('/api', taskRoutes);\napp.use('/api', userRoutes);\napp.use('/api', categoryRoutes);\napp.use('/api', locationRoutes);\napp.use('/api', multimediaRoutes);\napp.use('/api', reviewRoutes);\n\napp.get('/api/*', (req, res) => {\n  res.status(404);\n  res.json({\n    success: false,\n    payload: null,\n    message: `GOWORKR API SAYS: Endpoint not found for path: ${req.path}`,\n  });\n});\n\napp.use((error, req, res, next) => {\n  res.status(error.status || 500);\n  res.json({\n    success: false,\n    payload: null,\n    message: `GOWORKR API SAYS: ${error.message} for path: ${req.path}`,\n  });\n  next();\n});\n\n// import { User } from \"./api/user/model\"\n// console.log(\"User==>\", User);\n\n// listen for requests\nconst server = app.listen(process.env.PORT, hostname, () => {\n  console.log(`Server running at http://${hostname}:${process.env.PORT}/`);\n});\n\napp.sayHello = _ => 'Hello GoWorkR!';\n\nsetInterval(() => server.getConnections((err, connections) => {\n  if (err) {\n    console.log(err);\n  }\n  console.log(`${connections} connections currently open`);\n}), 10000);\n\nprocess.on('SIGTERM', shutDown);\nprocess.on('SIGINT', shutDown);\nprocess.on('SIGQUIT', shutDown);\n\nlet connections = [];\n\nserver.on('connection', (connection) => {\n  connections.push(connection);\n  // eslint-disable-next-line no-return-assign\n  connection.on('close', () => connections = connections.filter((curr) => curr !== connection));\n});\n\nfunction shutDown() {\n  console.log('Received kill signal, shutting down gracefully');\n  server.close((err) => {\n    if (err) {\n      console.error(err);\n      process.exit(1);\n    }\n    database.close(() => {\n      console.log('Mongoose connection disconnected');\n      process.exit(0);\n    });\n    console.log('Closed out remaining connections');\n    process.exit(0);\n  });\n\n  setTimeout(() => {\n    console.error('Could not close connections in time, forcefully shutting down');\n    process.exit(1);\n  }, 10000);\n\n  connections.forEach((curr) => curr.end());\n  setTimeout(() => connections.forEach((curr) => curr.destroy()), 5000);\n}\n\nexport default app;\n"],"file":"app.js"}