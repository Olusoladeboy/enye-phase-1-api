{"version":3,"sources":["../../../src/api/review/service.js"],"names":["module","fetchService","query","filter","skip","limit","sort","projection","population","Review","find","populate","select","exec","result","Error","message","createService","data","validateCreate","validate","error","newRecord","save","User","updateOne","_id","user","$push","reviews","result2","updateService","recordId","validateUpdate","findOneAndUpdate","patchService","deleteService","findOneAndRemove","$pull"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable object-curly-spacing */\n/* eslint-disable object-curly-newline */\nimport aqp from 'api-query-params';\nimport Review, { validateCreate, validateUpdate } from './model';\nimport User from '../user/model';\n// Logging\nconst module = 'Review';\n\nexport async function fetchService(query) {\n  try {\n    const { filter, skip, limit, sort, projection, population } = aqp(query);\n    const result = await Review.find(filter)\n      .populate(population)\n      .skip(skip)\n      .limit(limit)\n      .sort(sort)\n      .select(projection)\n      .exec();\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error retrieving ${module} record. ${err.message}`);\n  }\n}\n\n// eslint-disable-next-line complexity\nexport async function createService(data = {}) {\n  try {\n    const { error } = validateCreate.validate(data);\n    if (error) throw new Error(`Error validating request data. ${error.message}`);\n    const newRecord = new Review(data);\n    const result = await newRecord.save();\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    const result2 = await User.updateOne({ _id: result.user },\n      { $push: { reviews: result._id } }).exec();\n    return result;\n  } catch (err) {\n    throw new Error(`Error creating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function updateService(recordId = '', data = {}) {\n  try {\n    const { error } = validateUpdate.validate(data);\n    if (error) throw new Error(`Error validating request data. ${error.message}`);\n    const result = await Review.findOneAndUpdate({ _id: recordId }, data, { new: true });\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error updating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function patchService(recordId = '', data = {}) {\n  try {\n    const result = await Review.findOneAndUpdate({ _id: recordId }, data, { new: true });\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error patching ${module} record. ${err.message}`);\n  }\n}\n\n// eslint-disable-next-line complexity\nexport async function deleteService(recordId = '') {\n  try {\n    const result = await Review.findOneAndRemove({ _id: recordId });\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    const result2 = await User.updateOne({ _id: result.user },\n      // eslint-disable-next-line no-underscore-dangle\n      { $pull: { reviews: result._id } }).exec();\n    return result2;\n  } catch (err) {\n    throw new Error(`Error deleting ${module} record. ${err.message}`);\n  }\n}\n"],"file":"service.js"}