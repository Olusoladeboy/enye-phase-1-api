{"version":3,"sources":["../../../src/api/review/controller.js"],"names":["module","logger","log4js","getLogger","log","req","err","error","method","user","path","message","fetchHandler","res","query","result","length","createHandler","body","updateHandler","data","recordId","params","patchHandler","deleteHandler"],"mappings":"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","sourcesContent":["/* eslint-disable object-curly-newline */\nimport { success, fail, safeGet, log4js, getRequestIp } from '../../util';\nimport { fetchService, createService, updateService, patchService, deleteService } from './service';\n\nconst module = 'Reviews';\nconst logger = log4js.getLogger(`[${module}]`);\nfunction log(req, err) {\n  logger.error(`[400] [${getRequestIp(req)}] [${req.method}] [${safeGet(req.user, 'email')}] - [${req.path}], [${module}], ${err.message}`);\n}\n\nexport async function fetchHandler(req, res) {\n  try {\n    const result = await fetchService(req.query);\n    return success(res, 200, result, `${result.length} ${module} record(s) retrieved successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, err.message);\n  }\n}\n\nexport async function createHandler(req, res) {\n  try {\n    const result = await createService(req.body);\n    return success(res, 201, result, `${module} record(s) created successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error creating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function updateHandler(req, res) {\n  try {\n    const data = req.body;\n    const { recordId } = req.params;\n    const result = await updateService(recordId, data);\n    return success(res, 200, result, `${module} record(s) updated successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error updating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function patchHandler(req, res) {\n  try {\n    const { recordId } = req.params;\n    const result = await patchService(recordId, req.body);\n    return success(res, 200, result, `${module} record(s) patched successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error patching ${module} record. ${err.message}`);\n  }\n}\n\nexport async function deleteHandler(req, res) {\n  try {\n    const result = await deleteService(req.params.recordId);\n    return success(res, 200, result, `${module} record(s) deleted successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error deleting ${module} record. ${err.message}`);\n  }\n}\n"],"file":"controller.js"}