{"version":3,"sources":["../../../src/api/task/model.js"],"names":["Schema","mongoose","ObjectId","Types","FREQUENCY","validateCreate","Joi","object","name","string","required","tags","optional","code","status","title","description","manhour","number","completion","feedbacks","array","startDate","date","endDate","assignedDate","assignedTo","assignedBy","score","remark","voucher","recurring","frequency","valid","Object","values","assignments","office","createdBy","trim","length","validateUpdate","updatedBy","schema","type","String","index","category","ref","Number","Date","Boolean","deleted","deletedAt","deletedBy","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Task","model","insertMany","table"],"mappings":"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","sourcesContent":["/* eslint-disable object-curly-newline */\n/* eslint-disable import/no-cycle */\n/**\n * @author Emmanuel Olusola\n * @property {ObjectId} id Task primaryKey\n * @property {String} name Task short name\n * @property {String} tags Task tags are keywords\n * @property {String} code Task code\n * @property {ObjectId} category Task category\n * @property {String} status Task status \"PENDING|ASSIGNED|ONGOING|STARTED|ENDING|CLOSED\"\n * @property {String} title Task title\n * @property {String} description Task description explanation and expectations\n * @property {Number} manhour Task manhour estimated manhour required\n * @property {Number} completion Task completion current Percent executed\n * @property {Array} feedbacks Task feedbacks by User assignedTo\n * @property {Date} startDate Task startDate assignedTo mark as started\n * @property {Date} endDate Task endDate User assignedTo mark as ended\n * @property {Date} assignedDate Task assignedDate\n * @property {ObjectId} assignedTo Task assignedTo User performing the task\n * @property {ObjectId} assignedBy Task assignedBy User created the task\n * @property {Number} score Task score by User assignedBy\n * @property {String} remark Task remark by User assignedBy\n * @property {ObjectId} voucher Task voucher for needed funds by User assignedTo\n * @property {Array} assignments Task array of Assignment resources User assignedTo\n * @property {Boolean} recurring Task recurring status\n * @property {String} recurring Task frequency\n * @property {String} subsidiary Task subsidiary conducting the task\n * @property {ObjectId} office Task office id conducting the task\n * @description Task model holds record of all projects and assignments\n */\nimport Joi from 'joi';\nimport mongoose from 'mongoose';\n// eslint-disable-next-line camelcase\nimport { DATABASE } from '../../constants';\nimport table from './table';\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\nconst FREQUENCY = ['DAILY, WEEKLY, MONTHLY, QUARTERLY, ANNUALLY'];\n\nexport const validateCreate = Joi.object({\n  name: Joi.string().required(),\n  tags: Joi.string().optional(),\n  code: Joi.string().required(),\n  status: Joi.string().optional(),\n  title: Joi.string().required(),\n  description: Joi.string().required(), // Explanation and expectations\n  manhour: Joi.number().optional(),\n  completion: Joi.number().optional(), // Percent\n  feedbacks: Joi.array().optional(), // By User assignedTo\n  startDate: Joi.date().optional(),\n  endDate: Joi.date().optional(),\n  assignedDate: Joi.date().optional(),\n  assignedTo: Joi.string().optional(),\n  assignedBy: Joi.string().optional(),\n  score: Joi.number().optional(), // By User assignedBy\n  remark: Joi.string().optional(), // By User assignedBy\n  voucher: Joi.string().optional(),\n  recurring: Joi.boolean().optional(),\n  frequency: Joi.string().valid(...Object.values(FREQUENCY)).optional(),\n  assignments: Joi.array().optional(),\n  office: Joi.string().optional(),\n  createdBy: Joi.string().trim().length(24).required(),\n});\n\nexport const validateUpdate = Joi.object({\n  name: Joi.string().optional(),\n  tags: Joi.string().optional(),\n  code: Joi.string().optional(),\n  status: Joi.string().optional(),\n  title: Joi.string().optional(),\n  description: Joi.string().optional(), // Explanation and expectations\n  manhour: Joi.number().optional(),\n  completion: Joi.number().optional(), // Percent\n  feedbacks: Joi.array().optional(), // By User assignedTo\n  startDate: Joi.date().optional(),\n  endDate: Joi.date().optional(),\n  assignedDate: Joi.date().optional(),\n  assignedTo: Joi.string().optional(),\n  assignedBy: Joi.string().optional(),\n  score: Joi.number().optional(), // By User assignedBy\n  remark: Joi.string().optional(), // By User assignedBy\n  voucher: Joi.string().optional(),\n  recurring: Joi.boolean().optional(),\n  frequency: Joi.string().valid(...Object.values(FREQUENCY)).optional(),\n  assignments: Joi.array().optional(),\n  office: Joi.string().optional(),\n  updatedBy: Joi.string().trim().length(24).required(),\n});\n\nexport const schema = {\n  code: { type: String, required: true, trim: true, index: true },\n  name: { type: String },\n  tags: { type: String }, // Keywords\n  category: { type: ObjectId, ref: 'Category' },\n  status: { type: String },\n  title: { type: String },\n  description: { type: String }, // Explanation and expectations\n  manhour: { type: Number },\n  completion: { type: Number }, // Percent\n  feedbacks: [{ type: String }], // By User assignedTo\n  startDate: { type: Date },\n  endDate: { type: Date },\n  assignedDate: { type: Date },\n  assignedTo: { type: ObjectId, ref: 'User' },\n  assignedBy: { type: ObjectId, ref: 'User' },\n  score: { type: Number }, // By User assignedBy\n  remark: { type: String }, // By User assignedBy\n  voucher: { type: ObjectId, ref: 'Voucher' },\n  recurring: { type: Boolean, default: false },\n  frequency: { type: String, enum: Object.values(FREQUENCY) },\n  assignments: [{ type: ObjectId, ref: 'Assignment' }],\n  office: { type: ObjectId, ref: 'Office' },\n  createdBy: { type: ObjectId, ref: 'User', required: true },\n  updatedBy: { type: ObjectId, ref: 'User' },\n  deleted: { type: Boolean, default: false },\n  deletedAt: { type: Date },\n  deletedBy: { type: ObjectId, ref: 'User' },\n};\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set('collection', 'task');\n\nconst Task = mongoose.model('Task', newSchema);\n\nif (preload) { Task.insertMany(table); }\n\nexport default Task;\n"],"file":"model.js"}