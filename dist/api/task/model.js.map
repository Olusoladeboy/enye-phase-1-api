{"version":3,"sources":["../../../src/api/task/model.js"],"names":["Schema","mongoose","ObjectId","Types","STATUS","validateCreate","Joi","object","code","string","trim","required","name","category","length","description","manhour","number","optional","location","createdBy","validateUpdate","tags","status","completion","feedbacks","startDate","date","endDate","acceptedDate","acceptedBy","remark","updatedBy","schema","type","String","index","ref","Object","values","Number","feedback","Date","latitude","longitude","address","county","city","state","deleted","Boolean","deletedAt","deletedBy","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Task","model","insertMany","table"],"mappings":"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","sourcesContent":["/* eslint-disable object-curly-newline */\n/* eslint-disable import/no-cycle */\n/**\n * @author Emmanuel Olusola\n * @property {ObjectId} id Task primaryKey\n * @property {String} name Task short name\n * @property {String} tags Task tags are keywords\n * @property {String} code Task code\n * @property {ObjectId} category Task category\n * @property {String} status Task status \"PENDING|ASSIGNED|ONGOING|STARTED|ENDING|CLOSED\"\n * @property {String} title Task title\n * @property {String} description Task description explanation and expectations\n * @property {Number} manhour Task manhour estimated manhour required\n * @property {Number} completion Task completion current Percent executed\n * @property {Array} feedbacks Task feedbacks by User assignedTo\n * @property {Date} startDate Task startDate assignedTo mark as started\n * @property {Date} endDate Task endDate User assignedTo mark as ended\n * @property {Date} assignedDate Task assignedDate\n * @property {ObjectId} assignedTo Task assignedTo User performing the task\n * @property {ObjectId} assignedBy Task assignedBy User created the task\n * @property {Number} score Task score by User assignedBy\n * @property {String} remark Task remark by User assignedBy\n * @property {ObjectId} voucher Task voucher for needed funds by User assignedTo\n * @property {Array} assignments Task array of Assignment resources User assignedTo\n * @property {Boolean} recurring Task recurring status\n * @property {String} recurring Task frequency\n * @property {String} subsidiary Task subsidiary conducting the task\n * @property {ObjectId} office Task office id conducting the task\n * @description Task model holds record of all projects and assignments\n */\nimport Joi from 'joi';\nimport mongoose from 'mongoose';\n// eslint-disable-next-line camelcase\nimport { DATABASE } from '../../constants';\nimport table from './table';\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\nconst STATUS = ['UNASSIGNED', 'PENDING', 'ACCEPTED', 'STARTED', 'COMPLETED'];\n\nexport const validateCreate = Joi.object({\n  code: Joi.string().trim().required(),\n  name: Joi.string().required(),\n  category: Joi.string().trim().length(24).required(),\n  description: Joi.string().required(), // Explanation and expectations\n  manhour: Joi.number().optional(),\n  location: Joi.object().required(),\n  createdBy: Joi.string().trim().length(24).required(),\n});\n\nexport const validateUpdate = Joi.object({\n  name: Joi.string().optional(),\n  category: Joi.string().trim().length(24).optional(),\n  description: Joi.string().optional(), // Explanation and expectations\n  manhour: Joi.number().optional(),\n  location: Joi.object().optional(),\n  tags: Joi.string().optional(),\n  status: Joi.string().optional(),\n  completion: Joi.number().optional(), // Percent\n  feedbacks: Joi.string().optional(), // By User assignedTo\n  startDate: Joi.date().optional(),\n  endDate: Joi.date().optional(),\n  acceptedDate: Joi.date().optional(),\n  acceptedBy: Joi.string().optional(),\n  remark: Joi.string().optional(), // By User assignedBy\n  updatedBy: Joi.string().trim().length(24).required(),\n});\n\nexport const schema = {\n  code: { type: String, required: true, trim: true, index: true },\n  name: { type: String },\n  tags: { type: String }, // Keywords\n  category: { type: ObjectId, ref: 'Category' },\n  status: { type: String, enum: Object.values(STATUS), default: 'UNASSIGNED' },\n  description: { type: String }, // Explanation and expectations\n  manhour: { type: Number },\n  completion: { type: Number, default: 0 }, // Percent\n  feedback: { type: String }, // By User Attended To\n  startDate: { type: Date },\n  endDate: { type: Date },\n  acceptedDate: { type: Date },\n  acceptedBy: { type: ObjectId, ref: 'User' }, // User who accepted the task\n  remark: { type: String }, // By User assignedBy\n  location: {\n    latitude: { type: String },\n    longitude: { type: String },\n    address: { type: String },\n    county: { type: ObjectId, ref: 'County' },\n    city: { type: ObjectId, ref: 'City' },\n    state: { type: ObjectId, ref: 'State' },\n  },\n  createdBy: { type: ObjectId, ref: 'User', required: true },\n  updatedBy: { type: ObjectId, ref: 'User' },\n  deleted: { type: Boolean, default: false },\n  deletedAt: { type: Date },\n  deletedBy: { type: ObjectId, ref: 'User' },\n};\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set('collection', 'task');\n\nconst Task = mongoose.model('Task', newSchema);\n\nif (preload) { Task.insertMany(table); }\n\nexport default Task;\n"],"file":"model.js"}