{"version":3,"sources":["../../../src/api/task/routes.js"],"names":["router","express","Router","get","checkAuth","isValidUser","fetchRecord","post","createRecord","put","updateRecord","patch","patchRecord","deleteRecord"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAHA;AAKA,IAAMA,MAAM,GAAGC,oBAAQC,MAAR,EAAf;AAEA;;;;;;;;;;;;;;;;;;AAgBAF,MAAM,CAACG,GAAP,CAAW,QAAX,EAAqB,CAACC,qBAAD,EAAYC,uBAAZ,CAArB,EAA+CC,uBAA/C;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCAN,MAAM,CAACO,IAAP,CAAY,QAAZ,EAAsB,CAACH,qBAAD,EAAYC,uBAAZ,CAAtB,EAAgDG,wBAAhD;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCAR,MAAM,CAACS,GAAP,CAAW,kBAAX,EAA+B,CAACL,qBAAD,EAAYC,uBAAZ,CAA/B,EAAyDK,wBAAzD;AAEA;;;;;;;;;;;AAUAV,MAAM,CAACW,KAAP,CAAa,kBAAb,EAAiC,CAACP,qBAAD,EAAYC,uBAAZ,CAAjC,EAA2DO,uBAA3D;AAEA;;;;;;;;;;;AAUAZ,MAAM,UAAN,CAAc,kBAAd,EAAkC,CAACI,qBAAD,EAAYC,uBAAZ,CAAlC,EAA4DQ,wBAA5D;eAEeb,M","sourcesContent":["/* eslint-disable object-curly-newline */\nimport express from 'express';\nimport { checkAuth, isValidUser } from '../../middleware';\nimport { fetchRecord, createRecord, updateRecord, deleteRecord, patchRecord } from './controller';\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/tasks?id={recordId} Retrieve Task records\n * @apiName RetrieveTask\n * @apiGroup Task\n * @apiHeader {String} Authorization Bearer token\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/tasks?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get('/tasks', [checkAuth, isValidUser], fetchRecord);\n\n/**\n * @api {post} /api/tasks Create a Task record\n * @apiName CreateTask\n * @apiGroup Task\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} name Task short name\n * @apiParam {String} tags Task tags are keywords\n * @apiParam {String} code Task code\n * @apiParam {ObjectId} category Task category\n * @apiParam {String} status Task status \"PENDING|ASSIGNED|ONGOING|STARTED|ENDING|CLOSED\"\n * @apiParam {String} title Task title\n * @apiParam {String} description Task description explanation and expectations\n * @apiParam {Number} manhour Task manhour estimated manhour required\n * @apiParam {Number} completion Task completion current Percent executed\n * @apiParam {Array} feedbacks Task feedbacks by User assignedTo\n * @apiParam {Date} startDate Task startDate assignedTo mark as started\n * @apiParam {Date} endDate Task endDate User assignedTo mark as ended\n * @apiParam {Date} assignedDate Task assignedDate\n * @apiParam {ObjectId} assignedTo Task assignedTo User performing the task\n * @apiParam {ObjectId} assignedBy Task assignedBy User created the task\n * @apiParam {Number} score Task score by User assignedBy\n * @apiParam {String} remark Task remark by User assignedBy\n * @apiParam {ObjectId} voucher Task voucher for needed funds by User assignedTo\n * @apiParam {Array} assignments Task array of Assignment resources User assignedTo\n * @apiParam {Boolean} recurring Task recurring status\n * @apiParam {String} recurring Task frequency\n * @apiParam {String} subsidiary Task subsidiary conducting the task\n * @apiParam {ObjectId} office Task office id conducting the task\n * @apiSuccess {Object} Task Task's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Task not found.\n * @apiError 401 master access only.\n */\nrouter.post('/tasks', [checkAuth, isValidUser], createRecord);\n\n/**\n * @api {put} /api/tasks/{recordId} Update a Task record\n * @apiName UpdateTask\n * @apiGroup Task\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} name Task short name\n * @apiParam {String} tags Task tags are keywords\n * @apiParam {String} code Task code\n * @apiParam {ObjectId} category Task category\n * @apiParam {String} status Task status \"PENDING|ASSIGNED|ONGOING|STARTED|ENDING|CLOSED\"\n * @apiParam {String} title Task title\n * @apiParam {String} description Task description explanation and expectations\n * @apiParam {Number} manhour Task manhour estimated manhour required\n * @apiParam {Number} completion Task completion current Percent executed\n * @apiParam {Array} feedbacks Task feedbacks by User assignedTo\n * @apiParam {Date} startDate Task startDate assignedTo mark as started\n * @apiParam {Date} endDate Task endDate User assignedTo mark as ended\n * @apiParam {Date} assignedDate Task assignedDate\n * @apiParam {ObjectId} assignedTo Task assignedTo User performing the task\n * @apiParam {ObjectId} assignedBy Task assignedBy User created the task\n * @apiParam {Number} score Task score by User assignedBy\n * @apiParam {String} remark Task remark by User assignedBy\n * @apiParam {ObjectId} voucher Task voucher for needed funds by User assignedTo\n * @apiParam {Array} assignments Task array of Assignment resources User assignedTo\n * @apiParam {Boolean} recurring Task recurring status\n * @apiParam {String} recurring Task frequency\n * @apiParam {String} subsidiary Task subsidiary conducting the task\n * @apiParam {ObjectId} office Task office id conducting the task\n * @apiSuccess {Object} Task Task's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Task not found.\n * @apiError 401 master access only.\n */\nrouter.put('/tasks/:recordId', [checkAuth, isValidUser], updateRecord);\n\n/**\n * @api {patch} /api/tasks/{recordId} Patch tasks\n * @apiName PatchTask\n * @apiGroup Task\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Task not found.\n * @apiError 401 master access only.\n */\nrouter.patch('/tasks/:recordId', [checkAuth, isValidUser], patchRecord);\n\n/**\n * @api {delete} /api/tasks/{recordId} Delete a Task record\n * @apiName DeleteTask\n * @apiGroup Task\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Task not found.\n * @apiError 401 master access only.\n */\nrouter.delete('/tasks/:recordId', [checkAuth, isValidUser], deleteRecord);\n\nexport default router;\n"],"file":"routes.js"}