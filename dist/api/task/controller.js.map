{"version":3,"sources":["../../../src/api/task/controller.js"],"names":["module","logger","log4js","getLogger","log","req","err","error","method","user","path","message","fetchRecord","res","query","filter","skip","limit","sort","projection","population","Task","find","populate","select","exec","result","info","length","createRecord","data","body","terminal","code","id","validateCreate","validate","newRecord","save","updateRecord","recordId","params","validateUpdate","findOneAndUpdate","_id","patchRecord","deleteRecord","findOneAndRemove"],"mappings":"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","sourcesContent":["/* eslint-disable object-curly-newline */\nimport aqp from 'api-query-params';\nimport Task, { validateCreate, validateUpdate } from './model';\nimport { success, fail, safeGet, log4js, getRequestIp, generateCode } from '../../util';\n\n// Logging\nconst module = 'Task';\nconst logger = log4js.getLogger(`[${module}]`);\nfunction log(req, err) {\n  logger.error(`[400] [${getRequestIp(req)}] [${req.method}] [${safeGet(req.user, 'email')}] - [${req.path}], [${module}], ${err.message}`);\n}\n\nexport async function fetchRecord(req, res) {\n  const { query } = req;\n  const { filter, skip, limit, sort, projection, population } = aqp(query);\n  try {\n    const result = await Task.find(filter)\n      .populate(population)\n      .skip(skip)\n      .limit(limit)\n      .sort(sort)\n      .select(projection)\n      .exec();\n    if (!result) {\n      return fail(res, 404, `${module} record not found.`);\n    }\n    logger.info(`[200] [${getRequestIp(req)}] [${req.method}] [${safeGet(req.user, 'email')}] - [${req.path}]`);\n    return success(res, 200, result, `${result.length} ${module} record(s) retrieved successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error retrieving ${module} record. ${err.message}`);\n  }\n}\n\nexport async function createRecord(req, res) {\n  try {\n    const data = req.body;\n    const { terminal } = req.user;\n    data.code = generateCode(terminal.id, 10);\n    const { error } = validateCreate.validate(data);\n    if (error) return fail(res, 422, `Error validating ${module} data. ${error.message}`);\n    const newRecord = new Task(data);\n    const result = await newRecord.save();\n    if (!result) {\n      return fail(res, 404, `${module} record not found.`);\n    }\n    return success(res, 201, result, `${module} record(s) created successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error creating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function updateRecord(req, res) {\n  const data = req.body;\n  const { recordId } = req.params;\n  const { error } = validateUpdate.validate(data);\n  if (error) return fail(res, 422, `Error validating ${module} data. ${error.message}`);\n  try {\n    const result = await Task.findOneAndUpdate({ _id: recordId }, data, { new: true });\n    if (!result) {\n      return fail(res, 404, `${module} record not found.`);\n    }\n    return success(res, 200, result, `${module} record(s) updated successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error updating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function patchRecord(req, res) {\n  const data = req.body;\n  const { recordId } = req.params;\n  try {\n    const result = await Task.findOneAndUpdate({ _id: recordId }, data, { new: true });\n    if (!result) {\n      return fail(res, 404, `${module} record not found.`);\n    }\n    return success(res, 200, result, `${module} record(s) patched successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error patching ${module} record. ${err.message}`);\n  }\n}\n\nexport async function deleteRecord(req, res) {\n  const { recordId } = req.params;\n  try {\n    const result = await Task.findOneAndRemove({ _id: recordId });\n    if (!result) {\n      return fail(res, 404, `${module} record not found.`);\n    }\n    return success(res, 200, result, `${module} record(s) deleted successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error deleting ${module} record. ${err.message}`);\n  }\n}\n"],"file":"controller.js"}