{"version":3,"sources":["../../../src/api/access/routes.js"],"names":["router","express","Router","get","checkAuth","isValidUser","fetchRecord","post","createRecord","deleteRecord"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAMA,MAAM,GAAGC,oBAAQC,MAAR,EAAf;AAEA;;;;;;;;;;;;;;;;;AAeAF,MAAM,CAACG,GAAP,CAAW,WAAX,EAAwB,CAACC,qBAAD,EAAYC,uBAAZ,CAAxB,EAAkDC,uBAAlD;AAEA;;;;;;;;;;;;;;;;;;AAiBAN,MAAM,CAACO,IAAP,CAAY,WAAZ,EAAyB,CAACH,qBAAD,EAAYC,uBAAZ,CAAzB,EAAmDG,wBAAnD;AAEA;;;;;;;;;;;AAUAR,MAAM,UAAN,CAAc,qBAAd,EAAqC,CAACI,qBAAD,EAAYC,uBAAZ,CAArC,EAA+DI,wBAA/D;eAEeT,M","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidUser } from \"../../middleware\";\nimport { fetchRecord, createRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/accesses?id={recordId} Retrieve one or all records\n * @apiName RetrieveAccess\n * @apiGroup Access\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/accesses?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/accesses\", [checkAuth, isValidUser], fetchRecord);\n\n/**\n * @api {post} /api/accesses Create accesses\n * @apiName CreateAccess\n * @apiGroup Access\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} ipaddress Access IP address\n * @apiParam {String} software Access software\n * @apiParam {String} agent Access agent description\n * @apiParam {String} method Access GET|POST|PUT|OPTLETE\n * @apiParam {String} baseUrl Access base Url\n * @apiParam {String} version Access version\n * @apiParam {String} status Access statusENGR (required)\n * @apiSuccess {Object} Access Access's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Access not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/accesses\", [checkAuth, isValidUser], createRecord);\n\n/**\n * @api {delete} /api/accesses/{recordId} Delete accesses\n * @apiName DeleteAccess\n * @apiGroup Access\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Access not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/accesses/:recordId\", [checkAuth, isValidUser], deleteRecord);\n\nexport default router;\n"],"file":"routes.js"}