{"version":3,"sources":["../../../src/api/access/controller.js"],"names":["module","logger","log4js","getLogger","log","req","err","error","method","user","path","message","fetchRecord","res","query","filter","skip","limit","sort","projection","Access","find","select","exec","result","info","length","createRecord","data","body","newRecord","save","deleteRecord","recordId","params","findOneAndRemove","_id"],"mappings":"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","sourcesContent":["import aqp from \"api-query-params\";\nimport Access from \"./model\";\nimport { success, fail, safeGet, getRequestIp, log4js } from \"../../util\";\n\n// Logging\nconst module = \"Access\";\nconst logger = log4js.getLogger(`[${module}]`);\nfunction log(req, err) {\n    logger.error(`[400] [${getRequestIp(req)}] [${req.method}] [${safeGet(req.user, \"email\")}] - [${req.path}], [${module}], ${err.message}`);\n}\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Access.find(filter)\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return fail(res, 404, `${module} record not found.`);\n        }\n        logger.info(`[200] [${getRequestIp(req)}] [${req.method}] [${safeGet(req.user, \"email\")}] - [${req.path}]`);\n        return success(res, 200, result, `${result.length} ${module} record(s) retrieved successfully!`);\n    } catch (err) {\n        log(req, err);\n        return fail(res, 400, `Error retrieving ${module} record. ${err.message}`);\n    }\n}\n\nexport async function createRecord(req, res) {\n    try {\n        const data = req.body;\n        const newRecord = new Access(data);\n        const result = await newRecord.save();\n        if (!result) {\n            return fail(res, 404, `${module} record not found.`);\n        }\n        return success(res, 201, result, `${module} record(s) created successfully!`);\n    } catch (err) {\n        log(req, err);\n        return fail(res, 400, `Error creating ${module} record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId } = req.params;\n    try {\n        const result = await Access.findOneAndRemove({ _id: recordId });\n        if (!result) {\n            return fail(res, 404, `${module} record not found.`);\n        }\n        return success(res, 200, result, `${module} record(s) deleted successfully!`);\n    } catch (err) {\n        log(req, err);\n        return fail(res, 400, `Error deleting ${module} record. ${err.message}`);\n    }\n}\n"],"file":"controller.js"}