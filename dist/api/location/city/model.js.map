{"version":3,"sources":["../../../../src/api/location/city/model.js"],"names":["Schema","mongoose","ObjectId","Types","validateCreate","Joi","object","name","string","trim","required","abbreviation","optional","state","country","photo","createdBy","length","validateUpdate","updatedBy","schema","type","String","ref","deleted","Boolean","deletedAt","Date","deletedBy","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","plugin","mongoose_csv","City","model","insertMany","table"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n/**\n * @author Nditah\n * @property {ObjectId} id City primaryKey\n * @property {String} name City name (required)\n * @property {String} abbreviation City 2 or 3 letter-abbreviation\n * @property {ObjectId} state City state (required)\n * @property {String} country City country unique ISO 2-letter code\n * @property {String} photo City photo url\n * @property {Array} terminals City array of terminal ObjectIds (prohibited)\n * @property {ObjectId} createdBy (required) id of the User who created the record\n * @property {ObjectId} updatedBy id of the User who created the record\n * @description Records of all Peace Group cities.\n */\nimport Joi from 'joi';\nimport mongoose from 'mongoose';\n// eslint-disable-next-line camelcase\nimport mongoose_csv from 'mongoose-csv';\nimport { DATABASE } from '../../../constants';\nimport table from './table';\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const validateCreate = Joi.object({\n  name: Joi.string().trim().required(),\n  abbreviation: Joi.string().trim().optional(),\n  state: Joi.string().required(),\n  country: Joi.string().optional(),\n  photo: Joi.string().optional(),\n  createdBy: Joi.string().trim().length(24).required(),\n});\n\nexport const validateUpdate = Joi.object({\n  name: Joi.string().trim().optional(),\n  abbreviation: Joi.string().trim().optional(),\n  state: Joi.string().optional(),\n  country: Joi.string().optional(),\n  photo: Joi.string().optional(),\n  updatedBy: Joi.string().trim().length(24).required(),\n});\n\nexport const schema = {\n  name: { type: String },\n  abbreviation: { type: String },\n  country: { type: String, default: 'ng' },\n  photo: { type: String },\n  state: { type: ObjectId, ref: 'State', required: true },\n  createdBy: { type: ObjectId, ref: 'User', required: true },\n  updatedBy: { type: ObjectId, ref: 'User' },\n  deleted: { type: Boolean, default: false },\n  deletedAt: { type: Date },\n  deletedBy: { type: ObjectId, ref: 'User' },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set('collection', 'city');\nnewSchema.plugin(mongoose_csv);\n\nconst City = mongoose.model('City', newSchema);\nif (preload) { City.insertMany(table); }\n\nexport default City;\n"],"file":"model.js"}