{"version":3,"sources":["../../../../src/api/location/state/controller.js"],"names":["module","logger","log4js","getLogger","log","req","err","error","method","user","path","message","fetchRecord","res","query","filter","skip","limit","sort","projection","State","find","select","exec","result","info","length","createRecord","data","body","validateCreate","validate","newRecord","save","updateRecord","recordId","params","validateUpdate","findOneAndUpdate","_id","patchRecord","deleteRecord","findOneAndRemove"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable object-curly-newline */\nimport aqp from 'api-query-params';\nimport State, { validateCreate, validateUpdate } from './model';\nimport { success, fail, safeGet, log4js, getRequestIp } from '../../../util';\nimport { STATUS_MSG } from '../../../constants';\n\n// Logging\nconst module = 'State';\nconst logger = log4js.getLogger(`[${module}]`);\nfunction log(req, err) {\n  logger.error(`[400] [${getRequestIp(req)}] [${req.method}] [${safeGet(req.user, 'email')}] - [${req.path}], [${module}], ${err.message}`);\n}\n\nexport async function fetchRecord(req, res) {\n  const { query } = req;\n  const { filter, skip, limit, sort, projection } = aqp(query);\n  try {\n    const result = await State.find(filter)\n      .skip(skip)\n      .limit(limit)\n      .sort(sort)\n      .select(projection)\n      .exec();\n    if (!result) {\n      return fail(res, 404, `${module} record not found.`);\n    }\n    logger.info(`[200] [${getRequestIp(req)}] [${req.method}] [${safeGet(req.user, 'email')}] - [${req.path}]`);\n    return success(res, 200, result, `${result.length} ${module} record(s) retrieved successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error retrieving ${module} record. ${err.message}`);\n  }\n}\n\nexport async function createRecord(req, res) {\n  const data = req.body;\n  const { error } = validateCreate.validate(data);\n  if (error) return fail(res, 422, `Error validating ${module} data. ${error.message}`);\n  const newRecord = new State(data);\n  try {\n    const result = await newRecord.save();\n    if (!result) {\n      return fail(res, 404, `${module} record not found.`);\n    }\n    return success(res, 201, result, `${module} record(s) created successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error creating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function updateRecord(req, res) {\n  const data = req.body;\n  const { recordId } = req.params;\n  const { error } = validateUpdate.validate(data);\n  if (error) return fail(res, 422, `Error validating ${module} data. ${error.message}`);\n  try {\n    const result = await State.findOneAndUpdate({ _id: recordId }, data, { new: true });\n    if (!result) {\n      return fail(res, 404, `${module} record not found.`);\n    }\n    return success(res, 200, result, `${module} record(s) updated successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error updating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function patchRecord(req, res) {\n  const data = req.body;\n  const { recordId } = req.params;\n  try {\n    const result = await State.findOneAndUpdate({ _id: recordId }, data, { new: true });\n    if (!result) {\n      return fail(res, 404, `${module} record not found.`);\n    }\n    return success(res, 200, result, `${module} record(s) patched successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error patching ${module} record. ${err.message}`);\n  }\n}\n\nexport async function deleteRecord(req, res) {\n  const { recordId } = req.params;\n  try {\n    const result = await State.findOneAndRemove({ _id: recordId });\n    if (!result) {\n      return fail(res, 404, `${module} record not found.`);\n    }\n    return success(res, 200, result, `${module} record(s) deleted successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error deleting ${module} record. ${err.message}`);\n  }\n}\n"],"file":"controller.js"}