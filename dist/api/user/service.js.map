{"version":3,"sources":["../../../src/api/user/service.js"],"names":["module","fetchService","query","jwtToken","limit","filter","skip","sort","projection","population","searchString","q","$or","phone","phoneHome","surname","User","find","populate","select","exec","result","Error","message","createService","data","password","email","validateCreate","validate","error","findOne","duplicate","newRecord","save","updateService","recordId","validateUpdate","status","findOneAndUpdate","_id","patchService","deleteService","findOneAndRemove","getLoginType","loginType","updateApprovalService","userId","updatedBy","record","console","log","validateApproval","findById","user","deleted","deletedAt","approvedBy","approvedDate","Date","now","rejectedBy","rejectedDate","updateVerificationStatusService","verificationDate","verificationVideo","validateVerify","loginService","loginPayload","validateLogin","otp","type","otpAccess","bcryptjs","compareSync","toString","update","currentLogin","currentIp","lastLogin","lastIp","payload","id","userType","role","accessLevel","time","token","jwt","sign","JWT","jwtSecret","expiresIn","remakeId","replace","substring","updateTerminalIdService","list","Promise","all","map","subsidiary","terminal","rec","resolvedArray"],"mappings":"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","sourcesContent":["/* eslint-disable no-use-before-define */\n/* eslint-disable no-shadow */\n/* eslint-disable import/named */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-console */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable camelcase */\n/* eslint-disable object-property-newline */\nimport bcryptjs from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport aqp from 'api-query-params';\nimport User, {\n  validateCreate, validateUpdate, validateLogin, validateApproval, validateVerify,\n} from './model';\nimport { hasProp, hash, generateOtp } from '../../util';\n// import { sendSmsAsync, emailForgotPassword, sendEmailAsync, postData } from '../../services';\nimport { JWT } from '../../constants';\n\n// Logging\nconst module = 'User';\n\nexport async function fetchService(query, jwtToken) {\n  try {\n    const {\n      limit, filter, skip, sort, projection, population,\n    } = aqp(query);\n    const searchString = filter.q || '';\n    if (searchString) {\n      // filter.$text = { $search: searchString, $caseSensitive: false };\n      filter.$or = [{ phone: searchString },\n        { phoneHome: searchString },\n        { surname: searchString }];\n      delete filter.q;\n    }\n    // filter.deleted = false;\n    const result = await User.find(filter)\n      .populate(population)\n    // .populate({ path: 'notifications', select: 'message', match: { status: 'UNREAD' } })\n      .skip(skip)\n      .limit(limit)\n      .sort(sort)\n      .select(projection)\n      .exec();\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error retrieving ${module} record. ${err.message}`);\n  }\n}\n\n// eslint-disable-next-line complexity\nexport async function createService(data = {}) {\n  try {\n    data.password = data.password || 'peace'; //! Random password\n    const { password, email, phone } = data;\n    if (hasProp(data, 'password')) data.password = hash(data.password);\n    const { error } = validateCreate.validate(data);\n    if (error) throw new Error(`Error validating ${module} data. ${error.message}`);\n    const duplicate = await User.findOne({ $or: [{ email }, { phone }] }).exec();\n    if (duplicate) {\n      throw new Error(`Error! Record already exist for ${email} or ${phone}`);\n    }\n    const newRecord = new User(data);\n    const result = await newRecord.save();\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    return result;\n    //* Send Login credentials to User via email\n    // const subject = `Welcome, ${data.otherName} to Peacegroup ERP Dove2.0`;\n    // const body = `Your email is ${data.email} and your password is ${password}`;\n    // await sendEmailAsync(data.email, 'no-reply@peacegroup.ng', subject, body);\n    //* Create Customer Credentials for User\n    // const {\n    //   title,\n    //   surname,\n    //   otherName,\n    //   gender,\n    //   birthDate,\n    //   photo,\n    //   phoneHome,\n    //   address,\n    //   state,\n    //   county,\n    //   country,\n    //   kin,\n    //   kinPhone,\n    //   kinAddress,\n    //   terminal,\n    // } = data;\n    // const customerData = {\n    //   title,\n    //   surname,\n    //   otherName,\n    //   gender,\n    //   birthDate,\n    //   photo,\n    //   password,\n    //   phoneHome,\n    //   address,\n    //   state,\n    //   county,\n    //   country,\n    //   isUser: true,\n    //   email,\n    //   phone,\n    //   terminal,\n    // };\n    // customerData.contactPerson = `${kin}, ${kinAddress}`;\n    // customerData.contactPersonPhone = kinPhone;\n    // const customer = postData(jwtToken, '/erp/customers', customerData);\n    // console.log(customer);\n  } catch (err) {\n    throw new Error(`Error creating ${module} record. ${err.message}`);\n  }\n}\n\n// eslint-disable-next-line complexity\nexport async function updateService(recordId, data = {}, jwtToken = '') {\n  try {\n    // eslint-disable-next-line max-len\n    // if (recordId === '5a51bc91860d8b5ba0001000') return fail(res, 422, `Cannot update record. ${recordId}`);\n    if (hasProp(data, 'password')) {\n      data.password = hash(data.password);\n    }\n    const { error } = validateUpdate.validate(data);\n    data.status = 'PENDING';\n    if (error) throw new Error(`Error validating ${module} data. ${error.message}`);\n\n    const result = await User.findOneAndUpdate({ _id: recordId }, data, { new: true });\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error updating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function patchService(recordId, data = {}, jwtToken = '') {\n  try {\n    const result = await User.findOneAndUpdate({ _id: recordId }, data, { new: true });\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error patching ${module} record. ${err.message}`);\n  }\n}\n\n// eslint-disable-next-line consistent-return\nexport async function deleteService(recordId, jwtToken = '') {\n  try {\n    if (recordId === '5a51bc91860d8b5ba0001000') throw new Error(`Cannot delete record. ${recordId}`);\n    const result = await User.findOneAndRemove({ _id: recordId });\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error deleting ${module} record. ${err.message}`);\n  }\n}\n\n// export async function sendOTPService(data = {}, jwtToken = '') {\n//     try {\n//         const { error } = validateLogin.validate(data);\n//         if (error) throw new Error('Invalid paramater: require both Email & Phone for OTP');\n//         const { phone, email } = data;\n//         const otp = generateOtp();\n//         const update = {\n//             otp: hash(otp.toString()),\n//             $inc: { otpCount: 1 },\n//             otpAccess: true,\n//         };\n//         const q = { $and: [{ email }, { phone }] };\n//         const result = await User.findOneAndUpdate(q, update, { new: true }).exec();\n//         if (!result) {\n//             throw new Error(`User not found with phone ${phone} & email ${email}`);\n//         }\n//         const msg = `Login to the App using this phone number and the OTP ${otp} -PEACEGROUP`;\n//         const sentSmsObject = await sendSmsAsync(msg, phone);\n//         const sentEmailObject = await emailForgotPassword(email, msg);\n//         // eslint-disable-next-line no-undef\n//         logger.info(sentSmsObject, sentEmailObject);\n//         return { sentSmsObject, sentEmailObject };\n//     } catch (err) {\n//         throw new Error(`Error sending ${module} record. ${err.message}`);\n//     }\n// }\n\n// eslint-disable-next-line complexity\nfunction getLoginType(data) {\n  const { email, phone, password } = data;\n  let loginType = '';\n  if (email && password) {\n    loginType = 'EMAIL';\n  } else if (phone && password) {\n    loginType = 'PHONE';\n  }\n  // else if (phone && otp) {\n  //     loginType = 'OTP';\n  // }\n  return loginType;\n}\n\n// eslint-disable-next-line complexity\nexport async function updateApprovalService(recordId, data = {}, jwtToken = '') {\n  try {\n    const userId = data.updatedBy;\n    const { status } = data;\n    const record = { status };\n    console.log(recordId);\n    if (recordId === '5a51bc91860d8b5ba0001000') throw new Error('Cannot alter User record');\n    const { error } = validateApproval.validate(data);\n    if (error) throw new Error(`Error validating ${module} data. ${error.message}`);\n    const user = await User.findById(recordId).exec();\n    if (user.deleted) throw new Error(`Error approving ${module} record. It was deleted since ${user.deletedAt}`);\n    switch (data.status) {\n      case 'APPROVED':\n        record.approvedBy = userId;\n        record.approvedDate = Date.now();\n        break;\n      case 'REJECTED':\n        record.rejectedBy = userId;\n        record.rejectedDate = Date.now();\n        break;\n      default:\n    }\n    const result = await User.findOneAndUpdate({ _id: recordId }, record, { new: true });\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n  } catch (err) {\n    throw new Error(`Error updating ${module} record. ${err.message}`);\n  }\n}\n\n// eslint-disable-next-line consistent-return\n// eslint-disable-next-line complexity\nexport async function updateVerificationStatusService(recordId, data = {}, jwtToken = '') {\n  try {\n    // const userId = data.updatedBy;\n    console.log('record =>', recordId);\n    const { verificationDate, verificationVideo } = data;\n    const record = { verificationDate, verificationVideo };\n    if (recordId === '5a51bc91860d8b5ba0001000') throw new Error('Cannot alter User record');\n    const { error } = validateVerify.validate(data);\n    if (error) throw new Error(`Error validating ${module} data. ${error.message}`);\n    const user = await User.findById(recordId).exec();\n    console.log(user);\n    if (user.deleted) throw new Error(`Error verifying ${module} record. It was deleted since ${user.deletedAt}`);\n    record.verificationDate = Date.now();\n    const result = await updateService(recordId, data);\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n  } catch (err) {\n    throw new Error(`Error updating ${module} record. ${err.message}`);\n  }\n}\n\n// eslint-disable-next-line complexity\nexport async function loginService(loginPayload) {\n  try {\n    const { error } = validateLogin.validate(loginPayload);\n    if (error) throw new Error(`Invalid ${module} login data. ${error.message}`);\n    if (!getLoginType(loginPayload)) throw new Error('Invlaid login parameters');\n    const {\n      email, phone, otp, password, type,\n    } = loginPayload;\n    const filter = {};\n    if (type === 'PHONE' || type === 'OTP') {\n      filter.phone = phone;\n    } else {\n      filter.email = email;\n    }\n    const user = await User\n      .findOne(filter)\n      .select('-createdBy -updatedBy')\n      .exec();\n\n    if (!user) {\n      throw new Error('User not found.');\n    }\n    if (type === 'OTP') {\n      if (!user.otpAccess) {\n        throw new Error(`Authentication failed. OTP Access is ${user.otpAccess}`);\n      }\n      if (!bcryptjs.compareSync(otp, user.otp.toString())) {\n        throw new Error('Invalid OTP credentials.');\n      }\n    } else if (!bcryptjs.compareSync(password, user.password)) {\n      throw new Error('Wrong password.');\n    }\n\n    const update = {\n      otpAccess: false,\n      currentLogin: Date.now(),\n      currentIp: loginPayload.currentIp,\n      lastLogin: user.currentLogin,\n      lastIp: user.currentIp,\n    };\n    await User.findOneAndUpdate({ _id: user._id }, update, { new: true }).exec();\n    // Delete private attributes\n    user.password = null;\n    user.otp = null;\n    delete user.password;\n    delete user.otp;\n    const payload = {\n      id: user.id,\n      userType: 'User',\n      role: user.role,\n      accessLevel: user.accessLevel,\n      email: user.email,\n      phone: user.phone,\n      time: new Date(),\n    };\n\n    const token = jwt.sign(payload, JWT.jwtSecret, {\n      expiresIn: '240h', // JWT.tokenExpireTime,\n    });\n    return { token, user };\n  } catch (err) {\n    throw new Error(`Authentication failed: ${err.message}`);\n  }\n}\n\nfunction remakeId(id) {\n  return id.replace(id.substring(15, 18), 'ac0');\n}\n\nexport async function updateTerminalIdService() {\n  try {\n    const list = await User.find({}).exec();\n    const resolvedArray = await Promise.all(list.map(async (data) => {\n      if (data.subsidiary === 'PMT') {\n        console.log('\\nOld User ===> ', data);\n        data.terminal = remakeId(data.terminal.toString());\n        console.log('\\nNew User ===> ', data);\n        const rec = await User.findOneAndUpdate({ _id: data.id }, data, { new: true });\n        return rec;\n      }\n      return data;\n    }));\n  } catch (err) {\n    throw new Error(`Error creating ${module} record. ${err.message}`);\n  }\n}\n"],"file":"service.js"}