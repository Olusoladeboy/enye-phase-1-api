{"version":3,"sources":["../../../src/api/user/controller.js"],"names":["module","logger","log4js","getLogger","log","req","err","error","method","user","path","message","fetchHandler","res","jwtToken","query","result","length","createHandler","body","updateHandler","data","recordId","params","patchHandler","deleteHandler","getLoginType","email","phone","otp","password","loginType","loginHandler","type","updateApprovalHandler","updateVerificationStatusHandler"],"mappings":"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","sourcesContent":["/* eslint-disable object-curly-newline */\n/* eslint-disable no-unused-vars */\nimport {\n  fetchService,\n  createService,\n  updateService,\n  patchService,\n  deleteService,\n  loginService,\n  updateApprovalService,\n  updateVerificationStatusService } from './service';\nimport { success, fail, safeGet, log4js, getRequestIp } from '../../util';\nimport { getToken } from '../../middleware';\n// import { photoUpload } from \"../../services\";\n\n// Logging\nconst module = 'User';\nconst logger = log4js.getLogger(`[${module}]`);\n\nfunction log(req, err) {\n  logger.error(`[400] [${getRequestIp(req)}] [${req.method}] [${safeGet(req.user, 'email')}] - [${req.path}], [${module}], ${err.message}`);\n}\n\nexport async function fetchHandler(req, res) {\n  try {\n    const jwtToken = getToken(req);\n    const result = await fetchService(req.query, jwtToken);\n    return success(res, 200, result, `${result.length} ${module} record(s) retrieved successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, err.message);\n  }\n}\n\nexport async function createHandler(req, res) {\n  try {\n    const result = await createService(req.body);\n    return success(res, 201, result, `${module} record(s) created successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error creating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function updateHandler(req, res) {\n  try {\n    const data = req.body;\n    const { recordId } = req.params;\n    const jwtToken = getToken(req);\n    const result = await updateService(recordId, data, jwtToken);\n    return success(res, 200, result, `${module} record updated successfully`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error updating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function patchHandler(req, res) {\n  try {\n    const { recordId } = req.params;\n    const jwtToken = getToken(req);\n    const result = await patchService(recordId, req.body, jwtToken);\n    return success(res, 200, result, `${module} record(s) patched successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error patching ${module} record. ${err.message}`);\n  }\n}\n\nexport async function deleteHandler(req, res) {\n  try {\n    const jwtToken = getToken(req);\n    const result = await deleteService(req.params.recordId, jwtToken);\n    return success(res, 200, result, `${module} record(s) deleted successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error patching ${module} record. ${err.message}`);\n  }\n}\n\n// eslint-disable-next-line complexity\nfunction getLoginType(data) {\n  const {\n    email, phone, otp, password,\n  } = data;\n  let loginType = '';\n  if (email && password) {\n    loginType = 'EMAIL';\n  } else if (phone && password) {\n    loginType = 'PHONE';\n  } else if (phone && otp) {\n    loginType = 'OTP';\n  }\n  return loginType;\n}\n\nexport async function loginHandler(req, res) {\n  try {\n    // if (!req.body.currentIp) req.body.currentIp = getRequestIp(req);\n    if (!req.body.type) req.body.type = getLoginType(req.body);\n    const result = await loginService(req.body);\n    return success(res, 201, result, 'Login was successful!');\n  } catch (err) {\n    log(req, err);\n    return fail(res, 403, `Error login ${module}. ${err.message}`);\n  }\n}\n\n// export async function sendOTPHandler(req, res) {\n//   try {\n//     const jwtToken = getToken(req);\n//     await sendOTPService(req.body, jwtToken);\n//     return success(res, 200, {}, 'OTP sent successfully!');\n//   } catch (err) {\n//     log(req, err);\n//     return fail(res, 400, `Error sending ${module} record. ${err.message}`);\n//   }\n// }\n\n// export async function updatePhotoHandler(req, res) {\n//   try {\n//     return photoUpload(req, res, async(err) => {\n//       const data = {};\n//       const { recordId } = req.params;\n//       data.updatedBy = req.user.id;\n//       const jwtToken = getToken(req);\n//       if (err || req.file === undefined) return fail(res, 422,\n// `Error processing file. ${err.message}`);\n//       const fullPath = `upload/photo/${req.file.filename}`;\n//       data.photo = fullPath;\n//       const result = await updateService(recordId, data, jwtToken);\n//       if (!result) {\n//         return fail(res, 404, `${module} record not found.`);\n//       }\n//       return success(res, 200, result, `${result.length} ${module} record(s)\n//        retrieved successfully!`);\n//     });\n//   } catch (err) {\n//     log(req, err);\n//     return fail(res, 400, `Error creating ${module} record. ${err.message}`);\n//   }\n// }\n\n// eslint-disable-next-line complexity\nexport async function updateApprovalHandler(req, res) {\n  try {\n    const data = req.body;\n    const { recordId } = req.params;\n    const jwtToken = getToken(req);\n    const result = await updateApprovalService(recordId, data, jwtToken);\n    return success(res, 200, result, `${module} record updated successfully`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error updating ${module} record. ${err.message}`);\n  }\n}\n\n// eslint-disable-next-line complexity\nexport async function updateVerificationStatusHandler(req, res) {\n  try {\n    const data = req.body;\n    const { recordId } = req.params;\n    const jwtToken = getToken(req);\n    const result = await updateVerificationStatusService(recordId, data, jwtToken);\n    return success(\n      res,\n      200,\n      result,\n      `${module} employment record has been updated successfully!`,\n    );\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error updating ${module} record. ${err.message}`);\n  }\n}\n"],"file":"controller.js"}