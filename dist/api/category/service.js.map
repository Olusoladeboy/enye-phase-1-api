{"version":3,"sources":["../../../src/api/category/service.js"],"names":["module","fetchService","query","filter","skip","limit","sort","projection","population","Category","find","populate","select","exec","result","Error","message","createService","data","validateCreate","validate","error","newRecord","save","updateService","recordId","validateUpdate","findOneAndUpdate","_id","patchService","deleteService","findOneAndRemove"],"mappings":"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","sourcesContent":["/* eslint-disable object-shorthand */\nimport aqp from 'api-query-params';\nimport Category, { validateCreate, validateUpdate } from './model';\n\nconst module = 'Category';\n\nexport async function fetchService(query) {\n  try {\n    const {\n      filter, skip, limit, sort, projection, population,\n    } = aqp(query);\n    const result = await Category.find(filter)\n      .populate(population)\n      .skip(skip)\n      .limit(limit)\n      .sort(sort)\n      .select(projection)\n      .exec();\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error retrieving ${module} record. ${err.message}`);\n  }\n}\n\nexport async function createService(data) {\n  try {\n    const { error } = validateCreate.validate(data);\n    if (error) throw new Error(`Error validating ${module} data. ${error.message}`);\n    const newRecord = new Category(data);\n    const result = await newRecord.save();\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error creating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function updateService(recordId, data) {\n  try {\n    const { error } = validateUpdate.validate(data);\n    if (error) throw new Error(`Error validating ${module} data. ${error.message}`);\n    const result = await Category.findOneAndUpdate({ _id: recordId }, data, { new: true });\n    if (!result) {\n      throw new Error(`${module} record with Id ${recordId} not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error updating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function patchService(recordId, data) {\n  try {\n    const result = await Category.findOneAndUpdate({ _id: recordId }, data, { new: true });\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error patching ${module} record. ${err.message}`);\n  }\n}\n\nexport async function deleteService(recordId) {\n  try {\n    const result = await Category.findOneAndRemove({ _id: recordId });\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error deleting ${module} record. ${err.message}`);\n  }\n}\n"],"file":"service.js"}