{"version":3,"sources":["../../../src/api/category/controller.js"],"names":["module","logger","log4js","getLogger","log","req","err","error","method","user","path","message","fetchHandler","res","query","result","info","length","createHandler","data","body","updateHandler","recordId","params","patchHandler","deleteHandler"],"mappings":"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","sourcesContent":["import {\n  fetchService, createService, updateService, patchService, deleteService,\n} from './service';\nimport {\n  success, fail, safeGet, getRequestIp, log4js,\n} from '../../util';\n\n// Logging\nconst module = 'Category';\nconst logger = log4js.getLogger(`[${module}]`);\nfunction log(req, err) {\n  logger.error(`[400] [${getRequestIp(req)}] [${req.method}] [${safeGet(req.user, 'email')}] - [${req.path}], [${module}], ${err.message}`);\n}\n\nexport async function fetchHandler(req, res) {\n  const { query } = req;\n  try {\n    const result = await fetchService(query);\n    logger.info(`[200] [${getRequestIp(req)}] [${req.method}] [${safeGet(req.user, 'email')}] - [${req.path}]`);\n    return success(res, 200, result, `${result.length} ${module} record(s) retrieved successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error retrieving ${module} record. ${err.message}`);\n  }\n}\n\nexport async function createHandler(req, res) {\n  try {\n    const data = req.body;\n    const result = await createService(data);\n    return success(res, 201, result, `${module} record(s) created successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error creating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function updateHandler(req, res) {\n  try {\n    const data = req.body;\n    const { recordId } = req.params;\n    const result = await updateService(recordId, data);\n    return success(res, 200, result, `${module} record(s) updated successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error updating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function patchHandler(req, res) {\n  const data = req.body;\n  const { recordId } = req.params;\n  try {\n    const result = await patchService(recordId, data);\n    return success(res, 200, result, `${module} record(s) patched successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error patching ${module} record. ${err.message}`);\n  }\n}\n\nexport async function deleteHandler(req, res) {\n  const { recordId } = req.params;\n  try {\n    const result = await deleteService(recordId);\n    return success(res, 200, result, `${module} record(s) deleted successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error deleting ${module} record. ${err.message}`);\n  }\n}\n"],"file":"controller.js"}