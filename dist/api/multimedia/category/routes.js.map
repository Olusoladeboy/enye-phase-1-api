{"version":3,"sources":["../../../../src/api/multimedia/category/routes.js"],"names":["router","express","Router","get","checkAuth","isValidUser","fetchHandler","post","createHandler","put","updateHandler","patch","patchHandler","deleteHandler"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAIA,IAAMA,MAAM,GAAGC,oBAAQC,MAAR,EAAf;AAEA;;;;;;;;;;;;;;;;;AAeAF,MAAM,CAACG,GAAP,CAAW,mBAAX,EAAgC,CAACC,qBAAD,EAAYC,uBAAZ,CAAhC,EAA0DC,wBAA1D;AAEA;;;;;;;;;;;;;;;;AAeAN,MAAM,CAACO,IAAP,CAAY,mBAAZ,EAAiC,CAACH,qBAAD,EAAYC,uBAAZ,CAAjC,EAA2DG,yBAA3D;AAEA;;;;;;;;;;;;;;;;AAgBAR,MAAM,CAACS,GAAP,CAAW,6BAAX,EAA0C,CAACL,qBAAD,EAAYC,uBAAZ,CAA1C,EAAoEK,yBAApE;AAEA;;;;;;;;;;;AAUAV,MAAM,CAACW,KAAP,CAAa,6BAAb,EAA4C,CAACP,qBAAD,EAAYC,uBAAZ,CAA5C,EAAsEO,wBAAtE;AAEA;;;;;;;;;;;AAUAZ,MAAM,UAAN,CAAc,6BAAd,EAA6C,CAACI,qBAAD,EAAYC,uBAAZ,CAA7C,EAAuEQ,yBAAvE;eAEeb,M","sourcesContent":["import express from 'express';\nimport { checkAuth, isValidUser } from '../../../middleware';\nimport {\n  fetchHandler, createHandler, updateHandler, deleteHandler, patchHandler,\n} from './controller';\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/media-categories?id={recordId} Retrieve one or all records\n * @apiName RetrieveCategory\n * @apiGroup Category\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/media-categories?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get('/media-categories', [checkAuth, isValidUser], fetchHandler);\n\n/**\n * @api {post} /api/media-categories Create media-categories\n * @apiName CreateCategory\n * @apiGroup Category\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} type Category type of resource\n * @apiParam {String} code Category code of resource\n * @apiParam {String} name Category name\n * @apiParam {String} description Category description\n * @apiParam {String} parent Category parent category\n * @apiSuccess {Object} Category Category's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Category not found.\n * @apiError 401 master access only.\n */\nrouter.post('/media-categories', [checkAuth, isValidUser], createHandler);\n\n/**\n * @api {put} /api/media-categories/{recordId} Update media-categories\n * @apiName UpdateCategory\n * @apiGroup Category\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} type Category type of resource\n * @apiParam {String} code Category code of resource\n * @apiParam {String} name Category name\n * @apiParam {String} description Category description\n * @apiParam {String} parent Category parent category\n * @apiSuccess {Object} Category Category's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Category not found.\n * @apiError 401 master access only.\n */\n\nrouter.put('/media-categories/:recordId', [checkAuth, isValidUser], updateHandler);\n\n/**\n * @api {patch} /api/media-categories/{recordId} Patch media-categories\n * @apiName PatchCategory\n * @apiGroup Category\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Category not found.\n * @apiError 401 master access only.\n */\nrouter.patch('/media-categories/:recordId', [checkAuth, isValidUser], patchHandler);\n\n/**\n * @api {delete} /api/media-categories/{recordId} Delete media-categories\n * @apiName DeleteCategory\n * @apiGroup Category\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Category not found.\n * @apiError 401 master access only.\n */\nrouter.delete('/media-categories/:recordId', [checkAuth, isValidUser], deleteHandler);\n\nexport default router;\n"],"file":"routes.js"}