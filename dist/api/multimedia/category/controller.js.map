{"version":3,"sources":["../../../../src/api/multimedia/category/controller.js"],"names":["module","logger","log4js","getLogger","log","req","err","error","method","user","path","message","fetchHandler","res","query","result","metadata","length","createHandler","body","updateHandler","params","recordId","patchHandler","deleteHandler"],"mappings":"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","sourcesContent":["import {\n  fetchService, createService, updateService, patchService, deleteService,\n} from './service';\nimport {\n  success, fail, safeGet, getRequestIp, log4js,\n} from '../../../util';\n\n// Logging\nconst module = 'Category';\nconst logger = log4js.getLogger(`[${module}]`);\nfunction log(req, err) {\n  logger.error(`[400] [${getRequestIp(req)}] [${req.method}] [${safeGet(req.user, 'email')}] - [${req.path}], [${module}], ${err.message}`);\n}\n\nexport async function fetchHandler(req, res) {\n  try {\n    const { result, metadata } = await fetchService(req.query);\n    return success(res, 200, result, `${result.length} ${module} record(s) retrieved successfully!`, metadata);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error retrieving ${module} record. ${err.message}`);\n  }\n}\n\nexport async function createHandler(req, res) {\n  try {\n    const result = await createService(req.body);\n    return success(res, 201, result, `${module} record(s) created successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error creating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function updateHandler(req, res) {\n  try {\n    const result = await updateService(req.params.recordId, req.body);\n    return success(res, 200, result, `${module} record(s) updated successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error updating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function patchHandler(req, res) {\n  try {\n    const result = await patchService(req.params.recordId, req.body);\n    return success(res, 200, result, `${module} record(s) patched successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error patching ${module} record. ${err.message}`);\n  }\n}\n\nexport async function deleteHandler(req, res) {\n  try {\n    const result = await deleteService(req.params.recordId);\n    return success(res, 200, result, `${module} record(s) deleted successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error deleting ${module} record. ${err.message}`);\n  }\n}\n"],"file":"controller.js"}