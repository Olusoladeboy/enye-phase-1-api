{"version":3,"sources":["../../../../src/api/multimedia/media/model.js"],"names":["Schema","mongoose","ObjectId","Types","TYPE","validateCreate","Joi","object","type","string","valid","required","name","trim","description","optional","category","length","number","positive","width","duration","url","extension","createdBy","validateUpdate","updatedBy","schema","String","alias","index","unique","ref","Number","comment","deleted","Boolean","deletedAt","Date","deletedBy","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Media","model","insertMany","table"],"mappings":"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","sourcesContent":["/**\n * @author Olusola\n * @property {ObjectId} id Media primaryKey\n * @property {String} type Media type \"DOC|PDF|IMAGE|AUDIO|VIDEO|DATA\"\n * @property {String} name Media name or title\n * @property {String} url The Media url absolute-path\n * @property {ObjectId} category Media MediaCategory\n * @property {String} description Media description\n * @property {Number} length Media length dimension in mm\n * @property {Number} width Media width dimension in mm\n * @property {Number} duration Media duration in minutes for audio/visual\n * @property {Number} extension Media extension\n * @description Media record of all multimedia assets\n */\nimport Joi from 'joi';\nimport mongoose from 'mongoose';\nimport table from './table';\nimport { DATABASE } from '../../../constants';\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\nconst TYPE = ['DOC', 'PDF', 'IMAGE', 'AUDIO', 'VIDEO', 'DATA'];\n\nexport const validateCreate = Joi.object({\n  type: Joi.string().valid(...TYPE).required(),\n  name: Joi.string().trim().required(),\n  description: Joi.string().optional(),\n  category: Joi.string().trim().length(24).optional(),\n  length: Joi.number().positive().optional(),\n  width: Joi.number().positive().optional(),\n  duration: Joi.number().positive().optional(),\n  url: Joi.string().trim().required(),\n  // image: Joi.any().meta({ swaggerType: 'file' }).required(),\n  extension: Joi.string().trim().optional(),\n  createdBy: Joi.string().trim().length(24).required(),\n});\n\nexport const validateUpdate = Joi.object({\n  type: Joi.string().valid(...TYPE).optional(),\n  name: Joi.string().trim().optional(),\n  description: Joi.string().optional(),\n  category: Joi.string().trim().length(24).optional(),\n  length: Joi.number().positive().optional(),\n  width: Joi.number().positive().optional(),\n  duration: Joi.number().positive().optional(),\n  url: Joi.string().trim().optional(),\n  extension: Joi.string().trim().optional(),\n  updatedBy: Joi.string().trim().length(24).required(),\n});\n\nexport const schema = {\n  type: { type: String, enum: TYPE },\n  name: {\n    type: String, alias: 'title', trim: true, required: true, index: true,\n  },\n  url: {\n    type: String, trim: true, required: true, unique: true,\n  },\n  description: { type: String },\n  category: { type: ObjectId, ref: 'MediaCategory', index: true },\n  length: { type: Number, comment: 'mm', index: true },\n  width: { type: Number, comment: 'mm', index: true },\n  duration: { type: Number, comment: 'minute', index: true },\n  extension: { type: String, comment: 'minute', index: true },\n  createdBy: { type: ObjectId, required: true },\n  updatedBy: { type: ObjectId },\n  deleted: { type: Boolean, default: false },\n  deletedAt: { type: Date },\n  deletedBy: { type: ObjectId },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set('collection', 'media');\n\nconst Media = mongoose.model('Media', newSchema);\n\nif (preload) { Media.insertMany(table); }\n\nexport default Media;\n"],"file":"model.js"}