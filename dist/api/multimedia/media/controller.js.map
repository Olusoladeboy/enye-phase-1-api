{"version":3,"sources":["../../../../src/api/multimedia/media/controller.js"],"names":["dotenv","config","module","logger","log4js","getLogger","log","req","err","error","method","user","path","message","imageUrl","videoUrl","imageStoredLocally","multer","diskStorage","destination","file","callback","appRoot","console","filename","fieldname","Date","toISOString","replace","originalname","videoStoredLocally","uploadImageLocally","storage","array","uploadVideoLocally","createImageHandler","res","body","name","type","createdBy","id","url","files","data","result","length","createVideoHandler","description","category","fetchHandler","query","metadata","info","updateHandler","params","recordId","patchHandler","deleteHandler"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable import/no-unresolved */\nimport multer from 'multer';\nimport appRoot from 'app-root-path';\nimport dotenv from 'dotenv';\n\nimport {\n  fetchService, createService, updateService, patchService, deleteService,\n} from './service';\nimport {\n  success, fail, safeGet, log4js, getRequestIp,\n} from '../../../util';\n\ndotenv.config();\n\n// Logging\nconst module = 'Media';\nconst logger = log4js.getLogger(`[${module}]`);\nfunction log(req, err) {\n  logger.error(`[400] [${getRequestIp(req)}] [${req.method}] [${safeGet(req.user, 'email')}] - [${req.path}], [${module}], ${err.message}`);\n}\n\nlet imageUrl;\nlet videoUrl;\n\nconst imageStoredLocally = multer.diskStorage({\n  destination(req, file, callback) {\n    callback(null, `${appRoot}/src/upload/Images`);\n    console.log(`${appRoot}/src/upload/Images`);\n  },\n  filename(req, file, callback) {\n    // eslint-disable-next-line no-useless-escape\n    imageUrl = `${file.fieldname}_${new Date().toISOString().replace(/[\\/\\\\:]/g, '_')}_${file.originalname}`;\n    callback(null, imageUrl);\n  },\n});\n\nconst videoStoredLocally = multer.diskStorage({\n  destination(req, file, callback) {\n    callback(null, `${appRoot}/src/upload/Videos`);\n  },\n  filename(req, file, callback) {\n    // eslint-disable-next-line no-useless-escape\n    videoUrl = `${file.fieldname}_${new Date().toISOString().replace(/[\\/\\\\:]/g, '_')}_${file.originalname}`;\n    callback(null, videoUrl);\n  },\n});\n\nconst uploadImageLocally = multer({ storage: imageStoredLocally }).array('image', 3); // Field name and max count\nconst uploadVideoLocally = multer({ storage: videoStoredLocally }).array('video', 3); // Field name and max count\n\nexport async function createImageHandler(req, res) {\n  return uploadImageLocally(req, res, async (err) => {\n    try {\n      if (err) return fail(res, 422, `Error uploading media. ${err.message}`);\n      const {\n        name,\n        type,\n      } = req.body;\n      const {\n        id: createdBy,\n      } = req.user;\n      const url = req.files[0].path;\n      const data = {\n        type, name, url, createdBy,\n      };\n      console.log(data);\n      const result = await createService(data);\n      return success(res, 200, result, `${result.length} ${module} record(s) retrieved successfully!`, null);\n    } catch (error) {\n      logger.error(error);\n      return fail(res, 400, `Error creating ${module} record. ${error.message}`);\n    }\n  });\n}\n\nexport async function createVideoHandler(req, res) {\n  return uploadVideoLocally(req, res, async (err) => {\n    try {\n      if (err) return fail(res, 422, `Error uploading media. ${err.message}`);\n      const {\n        name,\n        description,\n        category,\n        type,\n      } = req.body;\n      const url = req.files[0].path;\n      const data = {\n        type, name, url, description, category, createdBy: '5a51bc91860d8b5ba0001000',\n      };\n      console.log(data);\n      const result = await createService(data);\n      return success(res, 200, result, `${result.length} ${module} record(s) retrieved successfully!`, null);\n    } catch (error) {\n      logger.error(error);\n      return fail(res, 400, `Error creating ${module} record. ${error.message}`);\n    }\n  });\n}\n\nexport async function fetchHandler(req, res) {\n  try {\n    const { result, metadata } = await fetchService(req.query);\n    logger.info(`[200] [${getRequestIp(req)}] [${req.method}] [${safeGet(req.user, 'email')}] - [${req.path}]`);\n    return success(res, 200, result, `${result.length} ${module} record(s) retrieved successfully!`, metadata);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error retrieving ${module} record. ${err.message}`);\n  }\n}\n\nexport async function updateHandler(req, res) {\n  try {\n    const result = await updateService(req.params.recordId, req.body);\n    return success(res, 200, result, `${module} record(s) updated successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error updating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function patchHandler(req, res) {\n  try {\n    const result = await patchService(req.params.recordId, req.body);\n    return success(res, 200, result, `${module} record(s) patched successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error patching ${module} record. ${err.message}`);\n  }\n}\n\nexport async function deleteHandler(req, res) {\n  try {\n    const result = await deleteService(req.params.recordId);\n    return success(res, 200, result, `${module} record(s) deleted successfully!`);\n  } catch (err) {\n    log(req, err);\n    return fail(res, 400, `Error deleting ${module} record. ${err.message}`);\n  }\n}\n"],"file":"controller.js"}