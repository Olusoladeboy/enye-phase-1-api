{"version":3,"sources":["../../../../src/api/multimedia/media/routes.js"],"names":["router","express","Router","get","req","res","sendFile","appRoot","fetchHandler","post","checkAuth","isValidUser","createImageHandler","createVideoHandler","put","updateHandler","patch","patchHandler","deleteHandler"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;;;AAJA;AAaA,IAAMA,MAAM,GAAGC,oBAAQC,MAAR,EAAf;AAEA;;;;;;;;;AAOAF,MAAM,CAACG,GAAP,CAAW,SAAX,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAClCA,EAAAA,GAAG,CAACC,QAAJ,WAAgBC,uBAAhB;AACD,CAFD;AAIA;;;;;;;;;;;AAUAP,MAAM,CAACG,GAAP,CAAW,QAAX,EAAqBK,wBAArB;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBAR,MAAM,CAACS,IAAP,CAAY,cAAZ,EAA4B,CAACC,qBAAD,EAAYC,uBAAZ,CAA5B,EAAsDC,8BAAtD;AACAZ,MAAM,CAACS,IAAP,CAAY,cAAZ,EAA4B,CAACC,qBAAD,EAAYC,uBAAZ,CAA5B,EAAsDE,8BAAtD;AAEA;;;;;;;;;;;;;;;;;;;AAkBAb,MAAM,CAACc,GAAP,CAAW,kBAAX,EAA+B,CAACJ,qBAAD,EAAYC,uBAAZ,CAA/B,EAAyDI,yBAAzD;AAEA;;;;;;;;;;;AAUAf,MAAM,CAACgB,KAAP,CAAa,kBAAb,EAAiC,CAACN,qBAAD,EAAYC,uBAAZ,CAAjC,EAA2DM,wBAA3D;AAEA;;;;;;;;;;AASAjB,MAAM,UAAN,CAAc,kBAAd,EAAkC,CAACU,qBAAD,EAAYC,uBAAZ,CAAlC,EAA4DO,yBAA5D;eAEelB,M","sourcesContent":["/* eslint-disable import/no-unresolved */\nimport express from 'express';\nimport appRoot from 'app-root-path';\nimport { checkAuth, isValidUser } from '../../../middleware';\nimport {\n  createImageHandler,\n  createVideoHandler,\n  fetchHandler,\n  updateHandler,\n  deleteHandler,\n  patchHandler,\n} from './controller';\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/multimedia/upload to get the form for uploading Multimedia record\n * @apiName RetrieveUploadForm\n * @apiGroup Media\n * @apiDescription The sample form allows you to test the API by uploading\n * and image and entering the image name that would be saved on db\n */\nrouter.get('/upload', (req, res) => {\n  res.sendFile(`${appRoot}/src/upload/index.html`);\n});\n\n/**\n * @api {get} /api/multimedia/media?{query} Retrieve Multimedia record(s)\n * @apiName RetrieveMedias\n * @apiGroup Media\n * @apiHeader {String} Authorization authorization token\n * @apiDescription image-assets name and url are stored on db. The images themselves\n * are stored on the AWS Bucket. The url points to it.\n * @apiSuccess {Object[]} rows List of image-assets.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get('/media', fetchHandler);\n\n/**\n * @api {post} /api/multimedia/media Create Multimedia record\n * @apiName CreateMedia\n * @apiGroup Media\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} type Media type \"DOC|PDF|IMAGE|AUDIO|VIDEO|DATA\"\n * @apiParam {String} name Media name or title\n * @apiParam {String} url The Media url absolute-path\n * @apiParam {ObjectId} category Media Category\n * @apiParam {String} description Media description\n * @apiParam {Number} length Media length dimension in mm\n * @apiParam {Number} width Media width dimension in mm\n * @apiParam {Number} duration Media duration in minutes for audio/visual\n * @apiParam {Number} extension Media extension\n * @apiSuccess {Object} image-asset record's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiDescription Medias uploaded to this endpoint are stored locally\n * on the backend server. This is only a fall back option when AWS is\n * no longer available.\n */\nrouter.post('/media/image', [checkAuth, isValidUser], createImageHandler);\nrouter.post('/media/video', [checkAuth, isValidUser], createVideoHandler);\n\n/**\n * @api {put} /api/multimedia/media/{MediaId} Update Multimedia record\n * @apiName UpdateMedia\n * @apiGroup Media\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} type Media type \"DOC|PDF|IMAGE|AUDIO|VIDEO|DATA\"\n * @apiParam {String} name Media name or title\n * @apiParam {String} url The Media url absolute-path\n * @apiParam {ObjectId} category Media Category\n * @apiParam {String} description Media description\n * @apiParam {Number} length Media length dimension in mm\n * @apiParam {Number} width Media width dimension in mm\n * @apiParam {Number} duration Media duration in minutes for audio/visual\n * @apiParam {Number} extension Media extension\n * @apiParam {String} url required image-asset url on cloud\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.put('/media/:recordId', [checkAuth, isValidUser], updateHandler);\n\n/**\n * @api {patch} /api/multimedia/media/{recordId} Patch Multimedia record\n * @apiName PatchMedia\n * @apiGroup Media\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Media not found.\n * @apiError 401 master access only.\n */\nrouter.patch('/media/:recordId', [checkAuth, isValidUser], patchHandler);\n\n/**\n * @api {delete} /api/multimedia/media/{recordId} Delete Multimedia record\n * @apiName DeleteMedia\n * @apiGroup Media\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 image-asset not found.\n */\nrouter.delete('/media/:recordId', [checkAuth, isValidUser], deleteHandler);\n\nexport default router;\n"],"file":"routes.js"}