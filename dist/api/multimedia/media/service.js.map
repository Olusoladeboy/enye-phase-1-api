{"version":3,"sources":["../../../../src/api/multimedia/media/service.js"],"names":["module","fetchService","query","filter","skip","limit","sort","projection","Media","find","select","exec","result","Error","estimatedDocumentCount","total","metadata","page","message","createService","data","validateCreate","validate","error","newRecord","save","updateService","recordId","validateUpdate","findOneAndUpdate","_id","patchService","deleteService","findOneAndRemove"],"mappings":"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","sourcesContent":["/* eslint-disable object-shorthand */\nimport aqp from 'api-query-params';\nimport Media, { validateCreate, validateUpdate } from './model';\n\nconst module = 'Media';\n\nexport async function fetchService(query) {\n  try {\n    const {\n      filter, skip, limit, sort, projection,\n    } = aqp(query);\n    const result = await Media.find(filter)\n      .skip(skip)\n      .limit(limit)\n      .sort(sort)\n      .select(projection)\n      .exec();\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    const total = await Media.find(filter).estimatedDocumentCount().exec();\n    const metadata = {\n      total, skip, limit, page: 0,\n    };\n    return { result, metadata };\n  } catch (err) {\n    throw new Error(`Error retrieving ${module} record. ${err.message}`);\n  }\n}\n\nexport async function createService(data) {\n  try {\n    const { error } = validateCreate.validate(data);\n    if (error) throw new Error(`Error validating ${module} data. ${error.message}`);\n    const newRecord = new Media(data);\n    const result = await newRecord.save();\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error ${module} createService. ${err.message}`);\n  }\n}\n\nexport async function updateService(recordId, data) {\n  try {\n    const { error } = validateUpdate.validate(data);\n    if (error) throw new Error(`Error validating ${module} data. ${error.message}`);\n    const result = await Media.findOneAndUpdate({ _id: recordId }, data, { new: true });\n    if (!result) {\n      throw new Error(`${module} record with Id ${recordId} not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error updating ${module} record. ${err.message}`);\n  }\n}\n\nexport async function patchService(recordId, data) {\n  try {\n    const result = await Media.findOneAndUpdate({ _id: recordId }, data, { new: true });\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error patching ${module} record. ${err.message}`);\n  }\n}\n\nexport async function deleteService(recordId) {\n  try {\n    const result = await Media.findOneAndRemove({ _id: recordId });\n    if (!result) {\n      throw new Error(`${module} record not found.`);\n    }\n    return result;\n  } catch (err) {\n    throw new Error(`Error deleting ${module} record. ${err.message}`);\n  }\n}\n"],"file":"service.js"}