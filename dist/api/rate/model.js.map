{"version":3,"sources":["../../../src/api/rate/model.js"],"names":[],"mappingssourcesContent":["// /* eslint-disable object-curly-newline */\n// /* eslint-disable import/no-cycle */\n// /**\n//  * @author Emmanuel Olusola\n//  * @property {ObjectId} id Task primaryKey\n//  * @property {String} name Task short name\n//  * @property {String} tags Task tags are keywords\n//  * @property {String} code Task code\n//  * @property {ObjectId} category Task category\n//  * @property {String} status Task status \"PENDING|ASSIGNED|ONGOING|STARTED|ENDING|CLOSED\"\n//  * @property {String} title Task title\n//  * @property {String} description Task description explanation and expectations\n//  * @property {Number} manhour Task manhour estimated manhour required\n//  * @property {Number} completion Task completion current Percent executed\n//  * @property {Array} feedbacks Task feedbacks by User assignedTo\n//  * @property {Date} startDate Task startDate assignedTo mark as started\n//  * @property {Date} endDate Task endDate User assignedTo mark as ended\n//  * @property {Date} assignedDate Task assignedDate\n//  * @property {ObjectId} assignedTo Task assignedTo User performing the task\n//  * @property {ObjectId} assignedBy Task assignedBy User created the task\n//  * @property {Number} score Task score by User assignedBy\n//  * @property {String} remark Task remark by User assignedBy\n//  * @property {ObjectId} voucher Task voucher for needed funds by User assignedTo\n//  * @property {Array} assignments Task array of Assignment resources User assignedTo\n//  * @property {Boolean} recurring Task recurring status\n//  * @property {String} recurring Task frequency\n//  * @property {String} subsidiary Task subsidiary conducting the task\n//  * @property {ObjectId} office Task office id conducting the task\n//  * @description Task model holds record of all projects and assignments\n//  */\n// import Joi from 'joi';\n// import mongoose from 'mongoose';\n// // eslint-disable-next-line camelcase\n// import { DATABASE } from '../../constants';\n// import table from './table';\n\n// const { Schema } = mongoose;\n// const { ObjectId } = Schema.Types;\n// const STATUS = ['UNASSIGNED', 'PENDING', 'ACCEPTED', 'STARTED', 'COMPLETED'];\n\n// export const validateCreate = Joi.object({\n//   code: Joi.string().trim().required(),\n//   name: Joi.string().required(),\n//   category: Joi.string().trim().length(24).required(),\n//   description: Joi.string().required(), // Explanation and expectations\n//   manhour: Joi.number().optional(),\n//   location: Joi.object().required(),\n//   createdBy: Joi.string().trim().length(24).required(),\n// });\n\n// export const validateUpdate = Joi.object({\n//   name: Joi.string().optional(),\n//   category: Joi.string().trim().length(24).optional(),\n//   description: Joi.string().optional(), // Explanation and expectations\n//   manhour: Joi.number().optional(),\n//   location: Joi.object().optional(),\n//   tags: Joi.string().optional(),\n//   status: Joi.string().optional(),\n//   completion: Joi.number().optional(), // Percent\n//   feedbacks: Joi.string().optional(), // By User assignedTo\n//   startDate: Joi.date().optional(),\n//   endDate: Joi.date().optional(),\n//   acceptedDate: Joi.date().optional(),\n//   acceptedBy: Joi.string().optional(),\n//   remark: Joi.string().optional(), // By User assignedBy\n//   updatedBy: Joi.string().trim().length(24).required(),\n// });\n\n// export const schema = {\n//   code: { type: String, required: true, trim: true, index: true },\n//   name: { type: String },\n//   tags: { type: String }, // Keywords\n//   category: { type: ObjectId, ref: 'Category' },\n//   status: { type: String, enum: Object.values(STATUS), default: 'UNASSIGNED' },\n//   description: { type: String }, // Explanation and expectations\n//   manhour: { type: Number },\n//   completion: { type: Number, default: 0 }, // Percent\n//   feedback: { type: String }, // By User Attended To\n//   startDate: { type: Date },\n//   endDate: { type: Date },\n//   acceptedDate: { type: Date },\n//   acceptedBy: { type: ObjectId, ref: 'User' }, // User who accepted the task\n//   remark: { type: String }, // By User assignedBy\n//   location: {\n//     latitude: { type: String },\n//     longitude: { type: String },\n//     address: { type: String },\n//     county: { type: ObjectId, ref: 'County' },\n//     city: { type: ObjectId, ref: 'City' },\n//     state: { type: ObjectId, ref: 'State' },\n//   },\n//   createdBy: { type: ObjectId, ref: 'User', required: true },\n//   updatedBy: { type: ObjectId, ref: 'User' },\n//   deleted: { type: Boolean, default: false },\n//   deletedAt: { type: Date },\n//   deletedBy: { type: ObjectId, ref: 'User' },\n// };\n// const preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\n// const options = DATABASE.OPTIONS;\n\n// const newSchema = new Schema(schema, options);\n// newSchema.set('collection', 'task');\n\n// const Task = mongoose.model('Task', newSchema);\n\n// if (preload) { Task.insertMany(table); }\n\n// export default Task;\n"],"file":"model.js"}